%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SCRIPTING EXAMPLE FOR THE SOURCE INFORMATION FLOW TOOLBOX (SIFT)    %%%
%%% SIFT Version: 1.52                                                  %%%
%%%                                                                     %%%
%%% This example demonstrates how to use SIFT from the command-line or  %%%
%%% in a script. This example applies to SIFT 1.52.                     %%%
%%%                                                                     %%%
%%% For additional information on the below steps, please consult the   %%%
%%% SIFT manual located at http://sccn.ucsd.edu/wiki/SIFT               %%%
%%%                                                                     %%%
%%% The senario for this anlaysis is that you have continuous resting   %%%
%%% state data recording to which you apply 30-s sliding-window         %%%
%%% analysis with no overlap. You are not intersted in time-domain      %%%
%%% analysis hence no movie analysis performend in the end.             %%%
%%%                                                                     %%%
%%% Authors: Tim Mullen (C) 2013, SCCN, INC, UCSD                       %%%
%%%          Makoto Miyakoshi 04/22/2021 SCCN, INC, UCSD                %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%% STEP 1: Load Data

% We will begin by loading up the 'RespWrong.set' (and optionally 'RespCorr.set') datasets located in the 
% /Data/ folder within the Sample Data package
% (you can download this package from the SIFT website or at 
% ftp://sccn.ucsd.edu/pub/tim/SIFT/SIFT_SampleData.zip)

% EEG = pop_loadset;
EEG = pop_loadset('filename','subj1Epoched.set','filepath','C:\SCCN\Nick\p0100_epochedForSift');


%% STEP 2: Define key Processing Parameters

Components          = 1:size(EEG.icaweights,1);     % these are the components/channels to which we'll fit our multivariate model. All ICs are selected.
WindowLengthSec     = 0.6;                           % sliding window length in seconds.
WindowStepSizeSec   = 0.01;                           % sliding window step size in seconds
NewSamplingRate     = [];                           % new sampling rate (if downsampling)
%EpochTimeRange      = [0 EEG.xmax];                % this is the time range (in seconds) to analyze (relative to event at t=0)
GUI_MODE            = 'nogui';                      % whether or not to show the Graphical User Interfaces. Can be 'nogui' or anything else (to show the gui)
VERBOSITY_LEVEL     = 2;                            % Verbosity Level (0=no/minimal output, 2=graphical output)

%% STEP 3: Pre-process the data

disp('===================================')
disp('PRE-PROCESSING DATA');

% select time range: Full length. Skipped.
%EEG = pop_select( EEG,'time',EpochTimeRange );

% select components: All ICs. Skipped.
%EEG = pop_subcomp( EEG, setdiff_bc(1:EEG.nbchan,Components), 0);

% resample data: Already resampled with EEG = pop_resample(EEG, 110, 0.8, 0.4); Skipped.
% if ~isempty(NewSamplingRate)
%     EEG = pop_resample( EEG, NewSamplingRate);
% end

% convert list of components to cell array of strings
ComponentNames = strtrim(cellstr(num2str(Components'))); 

% apply the command to pre-process the data. No piecewise detrending based on conversation with Andreas Widmann.
    EEG = pop_pre_prepData(EEG,GUI_MODE, ...
        'VerbosityLevel',VERBOSITY_LEVEL,   ...
        'SignalType',{'Components'},  ...
        'VariableNames',ComponentNames,   ...
        'NormalizeData',    ...
        {'verb' 0       ...
        'method' {'time' 'ensemble'}},   ...
         'Detrend',  ...
        {'verb' VERBOSITY_LEVEL ...
        'method' {'linear'}},  ...
        'resetConfigs',true,    ...
        'badsegments',[],       ...
        'newtrials',[],         ...
        'equalizetrials',false);

disp('===================================')

%% STEP 4: Identify the optimal model order

% cfg.modelingApproach.algorithm in pop_est_selModelOrder contains 'algorithm'.
% Possible values: {'BSBL BO', 'BSBL L1', 'T-MSBL', 'ARfit', 'Group Lasso (DAL/SCSA)', 'Group Lasso (ADMM)', 'Ridge Regression', 'SCSA EM', 'Vieira-Morf'}   
% See est_fitMVAR() help for detail. 

disp('===================================')
disp('MODEL ORDER IDENTIFICATION');

% Here we compute various model order selection criteria for varying model
% orders (e.g. 1 to 30) and visualize the results

% compute model order selection criteria...
EEG = pop_est_selModelOrder(EEG,GUI_MODE, ...
        'modelingApproach',         ...
            {'Segmentation VAR'     ...
                'algorithm' {'ARfit'} ... % Was 'Vieira-Morf'. 'Group Lasso (DAL/SCSA)' is recommended but slow. 'ARfit' is the simplest. (04/18/2021 Makoto)
                'winStartIdx' []    ...
                'winlen'  WindowLengthSec    ...
                'winstep' WindowStepSizeSec  ...
                'taperfcn' 'rectwin'    ... % For long sliding window like 20 s, rectangle window is suitable. (04/18/2021 Makoto)
                'epochTimeLims' []      ...
                'prctWinToSample' 100   ...
                'normalize' []          ...
                'detrend' {'method' 'linear'} ...
                'verb' VERBOSITY_LEVEL},      ...
        'morderRange',[1 20] ,  ... % Typically below 10 using the elbow method. (04/18/2021 Makoto)
        'downdate',true,        ...
        'runPll',[],            ...
        'icselector',{'sbc' 'aic' 'fpe' 'hq'},  ...
        'winStartIdx',[],       ...
        'epochTimeLims',[],     ...
        'prctWinToSample',100,   ...
        'plot', [], ...
        'verb',VERBOSITY_LEVEL);

% To plot the results, use this:
% The first input must be structure! Confirmed with vis_plotOrderCriteria() line 57 by GUI (04/18/2021 Makoto)
handles = vis_plotOrderCriteria(EEG.CAT.IC, struct('conditions', [],    ...
                                            'icselector', {{'sbc','aic','fpe','hq'}},  ...
                                            'minimizer', {{'elbow'}}, ... % Was 'min'. (04/18/2021 Makoto)
                                            'prclim', 90));
                                        
    % Original code which does not work (04/18/2021 Makoto)      
    %
    % handles = vis_plotOrderCriteria({'conditions' []    ...
    %                                             'icselector' {'sbc','aic','fpe','hq'}  ...
    %                                             'minimizer' {'min'} ...
    %                                             'prclim' 90});                                        
      
% If you want to save this figure you can uncomment the following lines:
%
% for i=1:length(handles)
%     saveas(handles(i),sprintf('orderResults%d.fig',i));
% end
% close(handles);

% Finally, we can automatically select the model order which minimizes one
% of the criteria (or you can set this manually based on above figure)
ModelOrder = ceil(mean(EEG(1).CAT.IC.hq.pelbow)); % Was 'popt' (04/18/2021 Makoto)


% As an alternative to using the minimum of the selection criteria over 
% model order, you can find the "elbow" in the plot of model order versus
% selection criterion value. This is useful in cases where the selection
% criterion does not have a clear minimum. For example, the lines below
% plot and select the elbow location (averaged across windows) for the AIC 
% criterion
%
% vis_plotOrderCriteria(EEG(1).CAT.IC,{},{},'elbow');
% ModelOrder = ceil(mean(EEG(1).CAT.IC.aic.pelbow));

disp('===================================')

%% STEP 5: Fit the VAR model

disp('===================================')
disp('MODEL FITTING');

% Here we can check that our selected parameters make sense
fprintf('===================================================\n');
fprintf('MVAR PARAMETER SUMMARY FOR CONDITION: %s\n',EEG.condition);
fprintf('===================================================\n');
est_dispMVARParamCheck(EEG,struct('morder',ModelOrder','winlen',WindowLengthSec,'winstep',WindowStepSizeSec,'verb',VERBOSITY_LEVEL));

% Once we have identified our optimal model order, we can fit our VAR model.

% Fit a model using the options specifed for model order selection (STEP 4)
[EEG] = pop_est_fitMVAR(EEG,GUI_MODE, ...
            EEG.CAT.configs.est_selModelOrder.modelingApproach, ...
            'ModelOrder',ModelOrder);

% Note that EEG.CAT.MODEL now contains the model structure with
% coefficients (in MODEL.AR), prediction errors (MODEL.PE) and other
% self-evident information

% Alternately, we can fit the VAR parameters using a Kalman filter (see
% doc est_fitMVARKalman for more info on arguments)
%
% EEG.CAT.MODEL = est_fitMVARKalman(EEG,0,'updatecoeff',0.0005,'updatemode',2,'morder',ModelOrder,'verb',2,'downsampleFactor',50);

disp('===================================')

%% STEP 6: Validate the fitted model

disp('===================================')
disp('MODEL VALIDATION');

% Here we assess the quality of the fit of our model w.r.t. the data. This step can be slow.
% We can obtain statistics for residual whiteness, percent consistency, and model stability ...
[EEG] = pop_est_validateMVAR(EEG,GUI_MODE,...
                            'checkWhiteness', ...
                                {'alpha' 0.05 ...
                                 'statcorrection' 'none' ...
                                 'numAcfLags' 50         ...
                                 'whitenessCriteria' {'Ljung-Box' 'ACF' 'Box-Pierce' 'Li-McLeod'} ...
                                 'winStartIdx' [] ...
                                 'prctWinToSample' 100  ...
                                 'verb' 0}, ...
                             'checkResidualVariance',...
                                {'alpha' 0.05 ...
                                 'statcorrection' 'none' ...
                                 'numAcfLags' 50    ...
                                 'whitenessCriteria' {}  ...
                                 'winStartIdx' []        ...
                                 'prctWinToSample' 100   ...
                                 'verb' 0}, ...
                             'checkConsistency',    ...
                                {'winStartIdx' []   ...
                                 'prctWinToSample' 100 ...
                                 'Nr' []                ...
                                 'donorm' 0         ...
                                 'nlags' []         ...
                                 'verb' 0}, ...
                             'checkStability',  ...
                                {'winStartIdx' []   ...
                                 'prctWinToSample' 100 ...
                                 'verb' 0},     ...
                             'prctWinToSample',70,  ...
                             'winStartIdx',[],      ...
                             'verb',VERBOSITY_LEVEL,...
                             'plot',false);

% ... and then plot the results
handles = [];
for k=1:length(EEG)
    
    handles(k) = vis_plotModelValidation({EEG(k).CAT.VALIDATION.whitestats}, ...
                                         {EEG(k).CAT.VALIDATION.PCstats},    ...
                                         {EEG(k).CAT.VALIDATION.stabilitystats});
                                     
    % Original code which does not work (04/18/2021 Makoto)      
    %
    %     handles(k) = vis_plotModelValidation(EEG(k).CAT.VALIDATION.whitestats, ...
    %                                          EEG(k).CAT.VALIDATION.PC,         ...
    %                                          EEG(k).CAT.VALIDATION.stability);
end

% If you want to save this figure you can uncomment the following lines:
%
% for i=1:length(handles)
%     saveas(handles(i),sprintf('validationResults%d.fig',i));
% end
% close(handles);


% To automatically determine whether our model accurately fits the data you
% can write a few lines as follows (replace 'acf' with desired statistic):
%
% if ~all(EEG(1).CAT.VALIDATION.whitestats.acf.w)
%     msgbox('Residuals are not completely white!');
% end

disp('===================================')


%% STEP 7: Compute Connectivity

disp('===================================')
disp('CONNECTIVITY ESTIMATION');

% Next we will compute various dynamical quantities, including connectivity,
% from the fitted VAR model. We can compute these for a range of
% frequencies (here 1-40 Hz). See 'doc est_mvarConnectivity' for a complete
% list of available connectivity and spectral estimators.

EEG = pop_est_mvarConnectivity(EEG,GUI_MODE, ...
            'connmethods',{'dDTF08' 'RPDC'}, ... % Was {'nDTF' 'dDTF08' 'nPDC' 'S'} (04/18/2021 Makoto)
            'absvalsq',true,           ...
            'spectraldecibels',true,   ...
            'freqs',[1:40] ,        ...
            'verb',VERBOSITY_LEVEL);

        
%% STEP 8: Visualize the Connectivity estimates in a Time-Frequency Grid

% This example plots a Time-Frequency Grid using "simple" percentile
% statistics (this doesn't use the rigorous stats returned by
% stat_surrogateStats).

% For a single condition, we call pop_vis_TimeFreqGrid(EEG(cnd),...)
% If we want to compare two conditions we can either use the dataset
% returned by pop_stat_surrogateStat() with the 'Hab' statistics mode 
% OR we can compare set1-set2 by calling 
% pop_vis_TimeFreqGrid(EEG([set1 set2]), ... ) where set1,set2 are the 
% indices of the datasets we want to compare.

% If you want to apply percentileThreshold, replace 'None' in 'thresholding' with the following.
%
%  {'Simple'       ...
%  'prcthresh' [percentileThreshold 3]  ...
%  'absthresh' []},    ...

connectivityMeasure = 'dDTF08'; % Alternatively, 'RPDC'
freqVec   = EEG.CAT.Conn.freqs;
deltaFreq = mean(diff(freqVec));
percentileThreshold = 95; 

EEG(end) = pop_vis_TimeFreqGrid(EEG(end),GUI_MODE, ...
                        'plotCondDiff',false,   ...
                        'vismode','TimeXFrequency', ...
                        'MatrixLayout', ...
                            {'Partial' ...
                             'triu' connectivityMeasure 'ut_clim' 99 ... % Was 100 (04/18/2021 Makoto)
                             'tril' connectivityMeasure 'lt_clim' 99 ... % Was 100 (04/18/2021 Makoto)
                             'diag' 'none' 'd_clim' 100   ...
                             'clim' 99},  ...
                         'clim',100,        ...
                         'timeRange',[],    ...
                         'freqValues', freqVec(1):deltaFreq:freqVec(end),   ... % Was [1 40] (04/18/2021 Makoto)
                         'windows',[],      ...
                         'pcontour',[],     ...
                         'thresholding',    ...
                              'None',       ...
                        'baseline',[-0.5 0] , ... % Was [-1 -0.25] (04/18/2021 Makoto)
                        'fighandles',[],        ...
                        'smooth',false,         ...
                        'xord',[],'yord',[],    ...
                        'plotorder',[],         ...
                        'topoplot','dipole',    ...
                        'topoplot_opts',{},     ...
                        'customTopoMatrix',[],  ...
                        'dipplot',  ...
                            {'mri' '' 'coordformat' 'mni' 'dipplotopt' {}}, ...
                        'nodelabels',ComponentNames,        ...
                        'foilines',[3 7 15],    ...
                        'foilinecolor',[0.7 0.7 0.7] ,  ...
                        'events',{{0 'r' ':' 2}},       ...
                        'freqscale','linear',           ...
                        'transform','linear',           ...
                        'yTickLoc','right',             ...
                        'titleString','',               ...
                        'titleFontSize',12,             ...
                        'axesFontSize',11,              ...
                        'textColor',[1 1 1] ,           ...
                        'linecolor',[1 1 1] ,           ...
                        'patchcolor',[1 1 1] ,          ...
                        'colormap',jet(64),             ...
                        'backgroundColor',[0 0 0]);
                    
                    
                    
%% STEP 9: Visualize the Connectivity in a movie (You need an updated movie function).

pop_vis_causalBrainMovie3D(EEG(end),GUI_MODE,'stats',[],'connmethod','dDTF08',...
                           'timeRange',[-0.5 1.5] ,'freqsToCollapse',[1:40] ,'collapsefun','max',...
                           'resample',0,'subtractconds',false,...
                           'showNodeLabels',{'nodelabels' ComponentNames'},...
                           'nodesToExclude',{},'edgeColorMapping','PeakFreq',...
                           'edgeSizeMapping','Connectivity',...
                           'nodeColorMapping','Outflow',...
                           'nodeSizeMapping','Outflow',...
                           'baseline',[-0.5 0], 'normalize',true,...
                           'useStats',[],'prcthresh',0.05,'absthresh',[],...
                           'footerPanelSpec',{'GraphMetric' 'plottingmode' {'all' 'envelope'} 'envColor' [1 0 0] },...
                           'BMopts',{'size' [800 800]  'visible' 'on' 'latency' [] ...
                                     'frames' [] 'figurehandle' [] 'cameraMenu' false ...
                                     'rotationpath3d' {'AngleFactor' 1 'PhaseFactor' 0.75 'FramesPerCycle' []} ...
                                     'view' [122 36]  'makeCompass' true 'project3d' 'off' ...
                                     'theme' {'theme' 'classic'} ...
                                     'Layers' {'scalp' {'scalpres' 'high' 'volumefile' [] 'scalptrans' 0.9 'scalpcolor' [1 0.75 0.65] } ...
                                               'skull' [] ...
                                               'csf' [] ...
                                               'cortex' {'cortexres' 'mid' 'volumefile' [] 'cortextrans' 0.9 ...
                                                         'cortexcolor' {'LONI_Atlas' 'colormapping' {'jet'}}} 'custom' []} ...
                           'facelighting' 'phong' 'opengl' 'on' 'events' {{0 'r' ':' 2}} ...
                           'flashEvents' false 'square' 'on' 'caption' true ...
                           'displayLegendLimitText' true 'showLatency' true ...
                           'dispRT' false 'backcolor' [0 0 0] ...
                           'graphColorAndScaling' {'nodeSizeLimits' [0.1 1] ...
                                                   'nodeColorLimits' [0 1] ...
                                                   'edgeSizeLimits' [0.1 0.8] ...
                                                   'edgeColorLimits' [0 1] ...
                                                   'nodeSizeDataRange' [] ...
                                                   'nodeColorDataRange' [] ...
                                                   'edgeSizeDataRange' [] ...
                                                   'edgeColorDataRange' [] ...
                                                   'centerDataRange' false ...
                                                   'edgeColormap' jet(64) ...
                                                   'diskscale' 0.2 'magnify' 1} ...
                           'outputFormat' {'framefolder' 'C:\SCCN\Nick\p0100_epochedForSift' 'framesout' 'jpg' 'moviename' 'test1' 'movieopts' {'videoname' 'test2'} 'size' []} ...
                           'mri' 'standard_BEM_mri.mat' 'plotimgs' false 'coordformat' 'spherical' ...
                           'dipplotopt' {} 'bmopts_suppl' {} 'renderBrainMovie' true ...
                           'speedy' false 'mode' 'init_and_render' 'vars' []});

disp('Done.')