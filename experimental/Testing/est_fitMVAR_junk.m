function [MODEL params] = est_fitMVAR_junk(varargin)

verb = arg_extract(varargin,{'verb','VerbosityLevel'},[],2);

g = arg_define([0 Inf],varargin, ...
        arg_norep({'EEG','ALLEEG','eeg'},mandatory), ...
        arg_subswitch({'algorithm','Algorithm'},'Vieira-Morf', ...
            {...
                'Vieira-Morf' @mvar_vieiramorf, ...
                'ARfit' {}, ...
                'GroupLasso_ADMM' @mvar_glADMM, ...
                'GroupLasso_DAL_SCSA' {}, ...
            },  {'Select a model fitting algorithm.', ...
                sprintf([...
                         '\n' ...
                         '\n' ...
                         '------------------\n' ...
                         'Vieira-Morf:\n' ...
                         '------------------\n' ...
                         'Unconstrained VAR modeling via Vieira-Morf Maximum Entropy algorithm.\n', ...
                         '\n' ...
                         'References and code:\n', ...
                         '[1] A. Schlogl, Comparison of Multivariate Autoregressive Estimators. Signal processing, Elsevier B.V.\n', ...
                         '[2] S.L. Marple "Digital Spectral Analysis with Applications" Prentice Hall, 1987.\n', ...
                         '\n' ...
                         '------------------\n' ...
                         'GroupLasso_ADMM:\n' ...
                         '------------------\n' ...
                         'Sparse VAR modeling via Group Lasso.\n', ...
                         'This option estimates sparse VAR coefficients using the Alternating Direction Method of Multipliers (ADMM).\n', ...
                         '\n' ...
                         'References and code:\n', ...
                         '[1] Boyd, Parikh, Chu, Pelato and Eckstein et al. Foundations and Trends in Machine Learning 3(1):1-122,2011.\n', ...
                         '[2] http://www.stanford.edu/~boyd/papers/distr_opt_stat_learning_admm.html' ...
                         '\n' ...
                         ])},'cat','Modeling Parameters'), ...
        arg({'morder','ModelOrder','modelOrder'},10,[1 Inf],'VAR model order','cat','Modeling Parameters'), ...
        arg_nogui({'winStartIdx','WindowStartIndices'},[],[],'Starting indices for windows. This is a vector of sample points (start of windows) at which to estimate windowed VAR model','cat','Modeling Parameters'), ...
        arg({'winlen','WindowLength'},0.5,[eps Inf],'Sliding window length (sec)','cat','Modeling Parameters'), ...
        arg({'winstep','WindowStepSize'},0.03,[eps Inf],'Window step size (sec)','cat','Modeling Parameters'), ...
        arg({'epochTimeLims','EpochTimeLimits'},[],[],'Epoch time limits (sec). This is relative to event time (e.g. [-1 2]). Default is the full epoch time range','cat','Modeling Parameters'), ...
        arg_nogui({'prctWinToSample','WindowSamplePercent'},100,[1 100],'Percent of windows to sample','cat','Modeling Parameters'), ...
        arg_subtoggle({'normalize','NormalizeData'},[],@pre_normData,'Z-normalize data within windows. Note this is not recommended for short windows','cat','Preprocessing'), ...
        arg_subtoggle({'detrend','Detrend'},{'method',{'constant'}, 'verb', verb},@pre_detrend,'Detrend or center each epoch','cat','Preprocessing'), ...
        arg({'timer','Timer'},false,[],'Active timer. Times are stored in EEG.MODEL.timeelapsed'), ...
        arg({'verb','VerbosityLevel'},verb,{int32(0) int32(1) int32(2)},'Verbosity level. 0 = no output, 1 = text, 2 = graphical') ...
        );
    
 disp(g);
         
