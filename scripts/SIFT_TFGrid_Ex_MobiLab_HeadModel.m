%% Try making a dipfit structure for custom head model
% *** NOTE: ignore this step if you already have an EEG.dipfit structure containing field model.meshVertices ***

HEAD_MODEL_PATH = <PATH TO HEAD MODEL HERE>
hmObj = headModel.loadFromFile(HEAD_MODEL_PATH);

% load meshes for visualization
surfData    = load(hmObj.surfaces,'surfData');
surfData    = surfData.surfData; % <-- NOTE: this line might change, you just need to get to the 1x3 array of (faces, vertices) structs
scalpMesh   = surfData(1);
csfMesh     = surfData(2);
cortexMesh  = surfData(3);

% Find ROI mesh vertices
% this assumes that EEG.CAT.curComponentNames contains
% the Atlas names of each ROI, matching elements of hmObj.atlas.label
% If you get error: 
% "The structure you want to remove is not defined in this atlas."
% ...then the labels do not match.
sourceSpace = hmObj.getSourceSpace4PEB;
for k=1:length(EEG.CAT.curComponentNames)
    [roiVertices{k}] = indices4Structure(hmObj,EEG.CAT.curComponentNames{k});
end

% build a dipfit structure
EEG.dipfit = hlp_makeDipfitStruct(sourceSpace,roiVertices,[],[]);
EEG.dipfit.mrifile = 'standard_BEM_mri.mat';


%% Plot a Time-Frequency Grid

Estimator = 'ModelWeights'; 'dDTF08'; % <-- the causal estimator to plot
GUI_MODE = 'gui'; % <-- can be 'gui or 'nogui' 
dipsize = 100;
BG_COLOR = [0.2 0.2 0.2]; % <-- cortex background color
smooth2D = false;
FaceAlpha = 0.3; % <-- cortex transparency
NodeLabels = {}; %<-- Here you can optionally overwrite the node labels (otherwise will use EEG.CAT.curComponentNames). ** Make sure the order matches EEG.CAT.curComponentNames **
PlotOrder = []; % <-- Here you can optionally set the numeric sequence order in which ROIs are arranged in the plot (i.e. a permutation of EEG.CAT.curComponentNames)

% Build a table to color-code each ROI on the surface of the brain
MeshColorTable = hlp_getROIVertexColorTable('NumVerticesInMesh',size(sourceSpace.vertices,1), ...
                                            'RoiVertices',{EEG.dipfit.model.meshVertices},...
                                            'BackgroundColor',BG_COLOR, ...
                                            'RoiColors',@(x)distinguishable_colors(x,[1 0 0; BG_COLOR]));
opts = {...
    'topoplot_opts', { ...
        'intrad', 0.6 ...
        'intsquare', 'off' ...
        'plotrad', 0.6 ...
        'numcontour', 0} ...
    'vismode', 'TimeXFrequency' ...
    'MatrixLayout', {'Full' ...
        'estimator', Estimator ...
        'clim', 99.9} ...
    'clim', 100 ...
    'timeRange', [] ...
    'freqValues', [] ...
    'windows', [] ...
    'pcontour', [] ...
    'thresholding', 'None' ...
    'baseline', [] ...
    'fighandles', [] ...
    'smooth', false ...
    'xord', [] ...
    'yord', [] ...
    'plotorder', [] ...
    'topoplot', 'dipole' ...
    'customTopoMatrix', [] ...
    'dipplot', { ...
        'row_view', [0 0] ...
        'col_view', [-90 90] ...
        'mri', 'standard_BEM_mri.mat' ...
        'coordformat', 'spherical' ...
        'dipplotopt', { ...
            'spheres', 'on' ...
            'dipolesize', 100 ...
            'projlines', 'off' ...
            'hidemri', 'on' ...
            'mesh', 'on' ...
            'meshdata', { ...
                'faces', cortexMesh.faces ...
                'vertices', cortexMesh.vertices} ...
            'meshfacecolor', 'interp' ...
            'meshedgecolor', 'none' ...
            'meshoptions', { ...
                'facealpha', FaceAlpha ...
                'edgealpha', FaceAlpha ...
                'FaceVertexCData', MeshColorTable ...
                'facelighting', 'gouraud'}}} ...
    'nodelabels', NodeLabels ...
    'foilines', [] ...
    'foilinecolor', [0.5 0.5 0.5] ...
    'events', TFGridEvents ...
    'freqscale', 'linear' ...
    'transform', 'linear' ...
    'yTickLoc', 'both' ...
    'titleString', '' ...
    'titleFontSize', 16 ...
    'axesFontSize', 14 ...
    'textColor', [1 1 1] ...
    'linecolor', [1 1 1] ...
    'patchcolor', [1 1 1] ...
    'colormap', jet(300) ...
    'backgroundColor', [0 0 0]};

% Make the plot (and/or generate GUI) 
pop_vis_TimeFreqGrid(EEG,GUI_MODE,opts{:});

